// ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
let n = 7
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
// ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧

//assisted: David 
// Add your code below:

func recursion(from target: Int) -> String{

    if target > 1{
        let origin = "Calculating factorial(\(String(target)))...\n"
        return origin + "\(recursion(from: target - 1))"
    }
    else{
        return "Calculating factorial(\(String(target)))..."
    }
}
func calculation(int: Int) -> Int{
    if int == 0 {
        return 1
    }
    else{
        return int * calculation(int: int - 1)
    }
}
func factorial(_ n: Int){
    if n == 1{
        print("Terminal case, returning 1.")

    }
    else{
        factorial(n - 1)
        print("Non-terminal case, returning \(String(calculation(int:n))).")
        
    }

}

print(recursion(from: n))

factorial(n)
print("The final result is: \(String(calculation(int:n))).")
